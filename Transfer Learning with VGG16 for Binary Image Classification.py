# -*- coding: utf-8 -*-
"""NNDLExp9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ORg3HN1KfsXPsqLaLV8fHBGfs3PpXfGD
"""

from google.colab import drive
drive.mount('/content/drive')

"""# **Transfer Learning**

# Step 1: Explore the VGG 16 model and the data it is trained on.

# Step 2: Load the VGG 16 model in your notebook and print the summary of the model.

# Step 3: Load a few images in your notebook and predict the class of the image using the pre-trained model.

# Step 4: Explore how to remove the last layer of the VGG model.

# Step 5: Add a few layers to the VGG 16 model.

# Step 6: Use this model to predict the class of the image.

# Step 7: Train the new model for binary classification of images.
"""

import numpy as np
from keras.preprocessing.image import load_img, img_to_array
from keras.applications.vgg16 import VGG16, preprocess_input, decode_predictions
from keras.models import Model
from keras.layers import Dense, Flatten
import matplotlib.pyplot as plt

"""# Step 2: Load the VGG 16 model in your notebook and print the summary of the model."""

#VGG16 model is trained on ImageNet dataset, which has 1000 classes.
base_model = VGG16(weights='imagenet', include_top=True)

print("VGG16 Model Summary:")
base_model.summary()

"""# Step 1: Explore the VGG 16 model and the data it is trained on."""

base_model = VGG16(weights='imagenet', include_top=True)
base_model.summary()

num_classes = 1000  # ImageNet dataset classes
print(f"Number of classes in ImageNet dataset: {num_classes}")

from keras.utils import plot_model
plot_model(base_model, to_file='vgg16_model.png', show_shapes=True)

"""# Step 3: Load a few images in your notebook and predict the class of the image using the pre-trained model."""

def pred1(model, image_path):
    img = plt.imread(image_path)
    plt.imshow(img)
    plt.axis('off')
    plt.title('Input')
    plt.show()

    img = load_img(image_path, target_size=(224, 224))
    img_array = img_to_array(img)
    img_array = img_array.reshape((1,) + img_array.shape)
    img_array = preprocess_input(img_array)

    preds = model.predict(img_array)
    decoded_preds = decode_predictions(preds, top=5)[0]

    print('Predictions:')
    for i, (imagenet_id, label, score) in enumerate(decoded_preds):
        print(f"{i+1}. {label} ({score:.2f})")

base_model = VGG16(weights='imagenet', include_top=True)

image1 = '/content/DOGGO.jpg'

pred1(base_model, image1)

image2 = '/content/LION.jpg'

pred1(base_model, image2)

image2 = '/content/DOGGO2.jpg'

pred1(base_model, image2)

"""# Step 4: Explore how to remove the last layer of the VGG model."""

base_model_layers = base_model.layers[:-1]
base_model_without_top = Model(inputs=base_model.input, outputs=base_model_layers[-1].output)

"""# Step 5: Add a few layers to the VGG 16 model."""

x = base_model_without_top.output
x = Flatten(name='custom_flatten')(x)
x = Dense(256, activation='relu', name='custom_dense')(x)
predictions = Dense(1, activation='sigmoid', name='custom_output')(x)

"""# Step 6: Load the VGG 16 model, add layers, and train the new model"""

custom_model = Model(inputs=base_model_without_top.input, outputs=predictions)
custom_model.summary()

"""# Step 7: Train the new model for binary classification of images"""

from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam

def TrainModel(model, train_generator, test_generator):
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    nn = model.fit(train_generator, epochs=10, validation_data=test_generator)
    return nn

def PlotAccuracy(net):
    plt.figure(figsize=(10, 4))
    plt.subplot(1, 2, 1)
    plt.plot(net.history['val_accuracy'], label='Test Accuracy')
    plt.plot(net.history['accuracy'], label='Train Accuracy')
    plt.title("Train and Test Accuracy")
    plt.ylabel('Accuracy')
    plt.xlabel('epochs')
    plt.legend()
    plt.plot()
    plt.subplot(1, 2, 2)
    plt.plot(net.history['loss'], label='Train Loss')
    plt.plot(net.history['val_loss'], label='Test Loss')
    plt.title("Train Loss")
    plt.ylabel('Loss')
    plt.xlabel('epochs')
    plt.legend()
    plt.show()
    plt.tight_layout()

def ShowMetrics(model, nn, test_generator):
    test_loss, test_acc = model.evaluate(test_generator)
    print(f"Test Loss is: {test_loss}")
    print(f"Test Accuracy is: {test_acc}")
    PlotAccuracy(nn)

train_datagen = ImageDataGenerator(
    rescale = 1./255,
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip = True,
    width_shift_range = 0.2,
    height_shift_range = 0.2
)

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/archive (3)/train',
    target_size = (256,256),
    class_mode = 'binary'
)

test_generator = test_datagen.flow_from_directory(
    '/content/drive/MyDrive/archive (3)/test',
    target_size = (256,256),
    class_mode = 'binary'
)

conv_base = VGG16(
    weights = 'imagenet',
    include_top = False,
    input_shape = (256,256,3)
)
conv_base.trainable = False
conv_base.summary()

def CreateModel():
  model1 = keras.models.Sequential()
  model1.add(conv_base)
  model1.add(layers.Flatten())
  model1.add(layers.Dense(256,activation='relu'))
  model1.add(layers.Dropout(0.1))
  model1.add(layers.Dense(120,activation='tanh'))
  model1.add(layers.Dropout(0.1))
  model1.add(layers.Dense(32,activation='relu'))
  model1.add(layers.Dropout(0.1))
  model1.add(layers.Dense(1,activation='sigmoid'))
  return model1

from tensorflow import keras
from tensorflow.keras import losses, layers, models
model = CreateModel()
model.summary(show_trainable=True)
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

nn = model.fit(train_generator, epochs = 10, validation_data = test_generator)

ShowMetrics(model, nn, test_generator)

import cv2,glob,os
path  = '/content/drive/MyDrive/archive (3)/test/cats'
for filename in glob.glob(os.path.join(path, '*.jpg')):
  img = cv2.imread(filename)
  test_img = cv2.resize(img,(256,256))
  test_input = test_img.reshape((1,256,256,3))
  pred = model.predict(test_input)
  print("Cat" if int(np.round(pred)) == 1 else "Dog")
  plt.imshow(test_img)
  plt.show()

import cv2,glob,os
path  = '/content/drive/MyDrive/archive (3)/test/dogs'
for filename in glob.glob(os.path.join(path, '*.jpg')):
  img = cv2.imread(filename)
  test_img = cv2.resize(img,(256,256))
  test_input = test_img.reshape((1,256,256,3))
  pred = model.predict(test_input)
  print("Dog" if int(np.round(pred)) == 1 else "Cat")
  plt.imshow(test_img)
  plt.show()

